import numpy as npfrom ...typing_utils import NumpyRealNumberArrayfrom ...core import TACfrom ..kineticmodel import KineticModel_NonLineardef model(t, A: float, muin: float, muout: float):        return A * t**(1/muin) * np.exp(-muout*t)class Gamma_Variate_Model(KineticModel_NonLinear):    def __init__(self,                  tinput: NumpyRealNumberArray,                  tacs: TAC):                super().__init__(tinput, tacs)                        self.micro_params = {'A': None,                       'muin': None,                       'muout': None}                self.f_to_fit = model        self.param_unit = {'A': 'kBq/mL',                           'muin': 'undetermined',                           'muout': '/min'}                self.name = 'Gamma-variate'                        def fit(self):                        self.fit_nonlinear()        self.generate_fitted_tacs()        self.calculate_fitness_measures()                        return None# class Gamma_Variate_Model2:#     def __init__(self, #                  tdata: NumpyRealNumberArray, #                  ydata: NumpyRealNumberArray):        #         self.tdata = tdata#         self.ydata = ydata#         self.f_to_fit = model#         self.params = {'A': None,#                        'muin': None,#                        'muout': None}#         self.params_list = None#         self.fitted_y = None        #         self.name = 'Gamma-variate'                    #     def fit(self):                #         popt, pcov = curve_fit(f = self.f_to_fit, #                                xdata = self.tdata, #                                ydata = self.ydata)                #         self.params['A'] = popt[0]#         self.params['muin'] = popt[1]#         self.params['muout'] = popt[2]        #         self.params_list = popt        #         self.fitted_y = self.f_to_fit(self.tdata, *self.params_list)        #         return None#     def plot_tac_with_fitting(self,#                               tissue_name: str | None = None, #                               title: str | None = None,#                               xlim: list[float] | tuple[float] | None = None,#                               ylim: list[float] | tuple[float] | None = None,#                               op_dir: str | None = None,#                               op_name_suffix: str | None = None) -> None:        #         plt.figure()#         plt.scatter(self.tdata, self.ydata, label=tissue_name)#         plt.plot(self.tdata, self.fitted_y)        #         plt.xlabel('t (min)')#         plt.ylabel('kBq/mL')#         if xlim is not None:#             if xlim[0] is not None:#                 plt.xlim(xmin = xlim[0])#             if xlim[1] is not None:#                 plt.xlim(xmax = xlim[1])#         if ylim is not None:#             if ylim[0] is not None:#                 plt.ylim(ymin = ylim[0])#             if ylim[1] is not None:#                 plt.ylim(ymax = ylim[1])#         plt.title(title)#         plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))#         plt.grid()        #         if op_dir is not None:#             if op_name_suffix is None:#                 opfile_path = os.path.join(op_dir, f'{self.name}_tac_with_fitting.png')#             else:#                 opfile_path = os.path.join(op_dir, f'{self.name}_tac_with_fitting{op_name_suffix}')#             plt.savefig(opfile_path, bbox_inches="tight", dpi=300)#         plt.show()    #         plt.close()                #         return None